#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'fog'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: objectstore action [options]"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
end.parse!


action = ARGV[0]
if action.nil?
  puts "Usage: "
  puts "objectstore list [bucket]"
  puts "objectstore upload local_dir|file bucket"
  puts "objectstore download bucket|file local_dir" 
  puts "objectstore delete file|bucket"
  exit 1
end


# get creds from openrc
# s3, cloudfiles, etc will use 
creds = {}
conn = nil
provider = "openstack"
config_file = "/etc/openrc"
if File.exists?(config_file)
  File.open(config_file, "r") do |f|
    f.each_line do |line|
      if line =~ /^export (.*)=(.*)$/
        creds[$1] = $2 
      end
    end
  end
end


case provider
when "openstack"
  puts "connecting to #{creds['OS_AUTH_URL']} as #{creds['OS_USERNAME']}..."
  conn = Fog::Storage.new({
    :provider            => 'OpenStack',
    :openstack_username  => creds['OS_USERNAME'],
    :openstack_api_key   => creds['OS_PASSWORD'],
    :openstack_auth_url  => creds['OS_AUTH_URL']+'/tokens'
  })
end


case action
when 'list'
  if ARGV.size > 1
    dir = conn.directories.get(ARGV[1])
    if dir.nil?
      puts "dir does not exist: #{ARGV[1]}"
      exit 1
    end
    puts dir.files.inspect 
  else
    puts conn.directories.inspect
  end

when 'delete'
  if ARGV.size < 2
    puts "Usage: objectstore delete file|bucket"
    exit 1
  end
  remote_object  = ARGV[1]
  if remote_object.include?('/')
    remote_dir = remote_object.split('/').first
    dir = conn.directories.get remote_dir
    if dir.nil?
      puts "cannot get remote dir: #{remote_dir}"
      exit 1
    end
    remote_parts = remote_object.split('/')
    remote_parts.shift
    remote_file = remote_parts.join('/')
    file = dir.files.get remote_file
    if file.nil?
      puts "remote file does not exist: #{remote_file}"
    else  
      puts "removing file: #{remote_file}"
      file.destroy 
    end
  else
    dir = conn.directories.get remote_object
    dir.files.each do |file|
      puts "removing file: #{file.key} from #{remote_object}"
      file.destroy
    end
    puts "removing dir: #{remote_object}"
    dir.destroy
    
  end

when 'upload'
  if ARGV.size < 3
    puts "Usage: objectstore upload local_dir|file bucket"
    exit 1
  end
  local_dir = ARGV[1]
  remote_dir = ARGV[2]

  dir = conn.directories.get remote_dir
  if dir.nil?
    dir = conn.directories.create :key => remote_dir 
  end

  if File.directory? local_dir 
    Dir.chdir local_dir
    files = `find . -type f`.split("\n")
    files.each do |file| 
      file.gsub!(/^\.\//,'')
      content = File.open(file)
      puts "upload: #{file} to #{remote_dir}"
      file = dir.files.create :key => file, :body => content 
    end
  else
    # must be a single file
    local_file = local_dir
    if File.exists? local_file
      content = File.open(local_file)
      puts "upload: #{local_file} to #{remote_dir}"
      file = dir.files.create :key => local_file, :body => content 
    else
      puts "cannot find: #{local_file}"
      exit 1
    end
  end

when 'download'
  if ARGV.size < 3
    puts "Usage: objectstore download bucket local_dir"
    exit 1
  end

  parts = ARGV[1].split('/')
  dir_name = parts.shift
  file = ''
  subdir = ''
  if parts.size > 0
    file = parts.join('/')
    parts.pop
    subdir = parts.join('/')
  end
  dir = conn.directories.get(dir_name)
  local_dir = ARGV[2]
    
  if local_dir[-1,1] != '/'
    local_dir += '/'
  end

  mkdir_out = `mkdir -p #{local_dir}`
  if $?.to_i != 0
    puts "error creating local dir: #{local_dir} - #{mkdir_out}"
    exit 1
  end
  
  dir.files.each do |remote_file|

    puts "remote_file: #{remote_file.inspect}"
    if remote_file.content_type == "application/directory"
      new_dir = local_dir + remote_file.key
      puts "creating dir: #{new_dir}"
      mkdir_out = `mkdir -p #{new_dir}`
       
      if $?.to_i != 0
        puts "error creating local dir: #{new_dir} - #{mkdir_out}"
        exit 1
      end
      
    else
      if remote_file.key.include?('/') &&
         subdir.empty? || remote_file.key.include?(subdir)
        dirs_list = remote_file.key.split('/')
        dirs_list.pop
        dirs = dirs_list.join('/')
        puts "making dir: #{local_dir + dirs}"
        `mkdir -p #{local_dir + dirs}` 
        if $?.to_i != 0
          puts "error creating local dir: #{local_dir + dirs}"
          exit 1
        end
      end

      # if bucket is supplied file will be empty
      puts "match on file: #{file} #{remote_file.key}"
      if file.empty? || file == remote_file.key
        File.open(local_dir + remote_file.key, 'w') do |local_file|
          puts "writing: #{local_dir + remote_file.key}"
          local_file.write(remote_file.body)
        end
      end

    end
  end
end
